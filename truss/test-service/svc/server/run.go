// Code generated by truss. DO NOT EDIT.
// Rerunning truss will overwrite this file.
// Version: 7dc4d5d85c
// Version Date: Mon May 28 22:12:59 UTC 2018

package server

import (
	"log"
	"net"
	"net/http"
	"net/http/pprof"

	kitprometheus "github.com/go-kit/kit/metrics/prometheus"
	stdprometheus "github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promhttp"

	// 3d Party
	"google.golang.org/grpc"

	// This Service
	pb "test/truss/pb"
	"test/truss/test-service/handlers"
	"test/truss/test-service/svc"
)

// Config contains the required fields for running a server
type Config struct {
	DebugAddr string
	GRPCAddr  string
}

func NewEndpoints() svc.Endpoints {

	fieldKeys := []string{"method", "error"}
	requestCount := kitprometheus.NewCounterFrom(stdprometheus.CounterOpts{
		Namespace: "my_group",
		Subsystem: "string_service",
		Name:      "request_count",
		Help:      "Number of requests received.",
	}, fieldKeys)
	requestLatency := kitprometheus.NewSummaryFrom(stdprometheus.SummaryOpts{
		Namespace: "my_group",
		Subsystem: "string_service",
		Name:      "request_latency_microseconds",
		Help:      "Total duration of requests in microseconds.",
	}, fieldKeys)
	countResult := kitprometheus.NewSummaryFrom(stdprometheus.SummaryOpts{
		Namespace: "my_group",
		Subsystem: "string_service",
		Name:      "count_result",
		Help:      "The result of each count method.",
	}, []string{}) // no fields here

	Prometheus := handlers.InstrumentingMiddleware{requestCount, requestLatency, countResult}
	// Business domain.
	var service pb.TestServer
	{
		service = handlers.NewService()
		// Wrap Service with middlewares. See handlers/middlewares.go

		service = handlers.WrapService(service)
	}

	// Endpoint domain.
	var (
		helloEndpoint = svc.MakeHelloEndpoint(service)
	)

	endpoints := svc.Endpoints{
		HelloEndpoint: helloEndpoint,
	}
	endpoints = handlers.ErrorCounter(Prometheus)(endpoints)
	// Wrap selected Endpoints with middlewares. See handlers/middlewares.go
	// endpoints = handlers.WrapEndpoints(endpoints)

	return endpoints
}

// Run starts a new http server, gRPC server, and a debug server with the
// passed config and logger
func Run(cfg Config) {
	endpoints := NewEndpoints()

	// Mechanical domain.
	errc := make(chan error)

	// Interrupt handler.
	go handlers.InterruptHandler(errc)

	// Debug listener.
	go func() {
		log.Println("transport", "debug", "addr", cfg.DebugAddr)

		m := http.NewServeMux()
		m.Handle("/debug/pprof/", http.HandlerFunc(pprof.Index))
		m.Handle("/debug/pprof/cmdline", http.HandlerFunc(pprof.Cmdline))
		m.Handle("/debug/pprof/profile", http.HandlerFunc(pprof.Profile))
		m.Handle("/debug/pprof/symbol", http.HandlerFunc(pprof.Symbol))
		m.Handle("/debug/pprof/trace", http.HandlerFunc(pprof.Trace))

		errc <- http.ListenAndServe(cfg.DebugAddr, m)
	}()

	// gRPC transport.
	go func() {
		log.Println("transport", "gRPC", "addr", cfg.GRPCAddr)
		ln, err := net.Listen("tcp", cfg.GRPCAddr)
		if err != nil {
			errc <- err
			return
		}

		srv := svc.MakeGRPCServer(endpoints)
		s := grpc.NewServer()
		pb.RegisterTestServer(s, srv)

		errc <- s.Serve(ln)
	}()
	http.ListenAndServe("127.0.0.1:9990", promhttp.Handler())
	// Run!
	log.Println("exit", <-errc)
}
