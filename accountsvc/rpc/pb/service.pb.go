// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	newcontext "context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AccountClient is the client API for Account service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AccountClient interface {
	// Account management
	RegisterLocalAccount(ctx context.Context, in *RegisterLocalAccountReq, opts ...grpc.CallOption) (*RegisterLocalAccountRsp, error)
	RegisterLDAPAccount(ctx context.Context, in *RegisterLDAPAccountReq, opts ...grpc.CallOption) (*RegisterLDAPAccountRsp, error)
	UnRegisterAccount(ctx context.Context, in *UnRegisterAccountReq, opts ...grpc.CallOption) (*UnRegisterAccountRsp, error)
	GetAccountInfo(ctx context.Context, in *GetAccountInfoReq, opts ...grpc.CallOption) (*GetAccountInfoRsp, error)
	GetAccountCount(ctx context.Context, in *GetAccountCountReq, opts ...grpc.CallOption) (*GetAccountCountRsp, error)
	GetAccountList(ctx context.Context, in *GetAccountListReq, opts ...grpc.CallOption) (*GetAccountListRsp, error)
	// Session Management
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRsp, error)
	Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutRsp, error)
	GetSessionInfo(ctx context.Context, in *GetSessionInfoReq, opts ...grpc.CallOption) (*GetSessionInfoRsp, error)
	SetSessionUserData(ctx context.Context, in *SetSessionUserDataReq, opts ...grpc.CallOption) (*SetSessionUserDataRsp, error)
	GetSessionUserData(ctx context.Context, in *GetSessionUserDataReq, opts ...grpc.CallOption) (*GetSessionUserDataRsp, error)
	// App management
	RegisterApp(ctx context.Context, in *RegisterAppReq, opts ...grpc.CallOption) (*RegisterAppRsp, error)
	UnRegisterApp(ctx context.Context, in *UnRegisterAppReq, opts ...grpc.CallOption) (*UnRegisterAppRsp, error)
}

type accountClient struct {
	cc *grpc.ClientConn
}

func NewAccountClient(cc *grpc.ClientConn) AccountClient {
	return &accountClient{cc}
}

func (c *accountClient) RegisterLocalAccount(ctx context.Context, in *RegisterLocalAccountReq, opts ...grpc.CallOption) (*RegisterLocalAccountRsp, error) {
	out := new(RegisterLocalAccountRsp)
	err := c.cc.Invoke(ctx, "/pb.Account/RegisterLocalAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) RegisterLDAPAccount(ctx context.Context, in *RegisterLDAPAccountReq, opts ...grpc.CallOption) (*RegisterLDAPAccountRsp, error) {
	out := new(RegisterLDAPAccountRsp)
	err := c.cc.Invoke(ctx, "/pb.Account/RegisterLDAPAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) UnRegisterAccount(ctx context.Context, in *UnRegisterAccountReq, opts ...grpc.CallOption) (*UnRegisterAccountRsp, error) {
	out := new(UnRegisterAccountRsp)
	err := c.cc.Invoke(ctx, "/pb.Account/UnRegisterAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) GetAccountInfo(ctx context.Context, in *GetAccountInfoReq, opts ...grpc.CallOption) (*GetAccountInfoRsp, error) {
	out := new(GetAccountInfoRsp)
	err := c.cc.Invoke(ctx, "/pb.Account/GetAccountInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) GetAccountCount(ctx context.Context, in *GetAccountCountReq, opts ...grpc.CallOption) (*GetAccountCountRsp, error) {
	out := new(GetAccountCountRsp)
	err := c.cc.Invoke(ctx, "/pb.Account/GetAccountCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) GetAccountList(ctx context.Context, in *GetAccountListReq, opts ...grpc.CallOption) (*GetAccountListRsp, error) {
	out := new(GetAccountListRsp)
	err := c.cc.Invoke(ctx, "/pb.Account/GetAccountList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRsp, error) {
	out := new(LoginRsp)
	err := c.cc.Invoke(ctx, "/pb.Account/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutRsp, error) {
	out := new(LogoutRsp)
	err := c.cc.Invoke(ctx, "/pb.Account/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) GetSessionInfo(ctx context.Context, in *GetSessionInfoReq, opts ...grpc.CallOption) (*GetSessionInfoRsp, error) {
	out := new(GetSessionInfoRsp)
	err := c.cc.Invoke(ctx, "/pb.Account/GetSessionInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) SetSessionUserData(ctx context.Context, in *SetSessionUserDataReq, opts ...grpc.CallOption) (*SetSessionUserDataRsp, error) {
	out := new(SetSessionUserDataRsp)
	err := c.cc.Invoke(ctx, "/pb.Account/SetSessionUserData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) GetSessionUserData(ctx context.Context, in *GetSessionUserDataReq, opts ...grpc.CallOption) (*GetSessionUserDataRsp, error) {
	out := new(GetSessionUserDataRsp)
	err := c.cc.Invoke(ctx, "/pb.Account/GetSessionUserData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) RegisterApp(ctx context.Context, in *RegisterAppReq, opts ...grpc.CallOption) (*RegisterAppRsp, error) {
	out := new(RegisterAppRsp)
	err := c.cc.Invoke(ctx, "/pb.Account/RegisterApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) UnRegisterApp(ctx context.Context, in *UnRegisterAppReq, opts ...grpc.CallOption) (*UnRegisterAppRsp, error) {
	out := new(UnRegisterAppRsp)
	err := c.cc.Invoke(ctx, "/pb.Account/UnRegisterApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountServer is the server API for Account service.
type AccountServer interface {
	// Account management
	RegisterLocalAccount(newcontext.Context, *RegisterLocalAccountReq) (*RegisterLocalAccountRsp, error)
	RegisterLDAPAccount(newcontext.Context, *RegisterLDAPAccountReq) (*RegisterLDAPAccountRsp, error)
	UnRegisterAccount(newcontext.Context, *UnRegisterAccountReq) (*UnRegisterAccountRsp, error)
	GetAccountInfo(newcontext.Context, *GetAccountInfoReq) (*GetAccountInfoRsp, error)
	GetAccountCount(newcontext.Context, *GetAccountCountReq) (*GetAccountCountRsp, error)
	GetAccountList(newcontext.Context, *GetAccountListReq) (*GetAccountListRsp, error)
	// Session Management
	Login(newcontext.Context, *LoginReq) (*LoginRsp, error)
	Logout(newcontext.Context, *LogoutReq) (*LogoutRsp, error)
	GetSessionInfo(newcontext.Context, *GetSessionInfoReq) (*GetSessionInfoRsp, error)
	SetSessionUserData(newcontext.Context, *SetSessionUserDataReq) (*SetSessionUserDataRsp, error)
	GetSessionUserData(newcontext.Context, *GetSessionUserDataReq) (*GetSessionUserDataRsp, error)
	// App management
	RegisterApp(newcontext.Context, *RegisterAppReq) (*RegisterAppRsp, error)
	UnRegisterApp(newcontext.Context, *UnRegisterAppReq) (*UnRegisterAppRsp, error)
}

func RegisterAccountServer(s *grpc.Server, srv AccountServer) {
	s.RegisterService(&_Account_serviceDesc, srv)
}

func _Account_RegisterLocalAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterLocalAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).RegisterLocalAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Account/RegisterLocalAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).RegisterLocalAccount(ctx, req.(*RegisterLocalAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_RegisterLDAPAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterLDAPAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).RegisterLDAPAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Account/RegisterLDAPAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).RegisterLDAPAccount(ctx, req.(*RegisterLDAPAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_UnRegisterAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnRegisterAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).UnRegisterAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Account/UnRegisterAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).UnRegisterAccount(ctx, req.(*UnRegisterAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_GetAccountInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).GetAccountInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Account/GetAccountInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).GetAccountInfo(ctx, req.(*GetAccountInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_GetAccountCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).GetAccountCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Account/GetAccountCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).GetAccountCount(ctx, req.(*GetAccountCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_GetAccountList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).GetAccountList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Account/GetAccountList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).GetAccountList(ctx, req.(*GetAccountListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Account/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Account/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).Logout(ctx, req.(*LogoutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_GetSessionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSessionInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).GetSessionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Account/GetSessionInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).GetSessionInfo(ctx, req.(*GetSessionInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_SetSessionUserData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSessionUserDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).SetSessionUserData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Account/SetSessionUserData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).SetSessionUserData(ctx, req.(*SetSessionUserDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_GetSessionUserData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSessionUserDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).GetSessionUserData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Account/GetSessionUserData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).GetSessionUserData(ctx, req.(*GetSessionUserDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_RegisterApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterAppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).RegisterApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Account/RegisterApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).RegisterApp(ctx, req.(*RegisterAppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_UnRegisterApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnRegisterAppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).UnRegisterApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Account/UnRegisterApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).UnRegisterApp(ctx, req.(*UnRegisterAppReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Account_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Account",
	HandlerType: (*AccountServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterLocalAccount",
			Handler:    _Account_RegisterLocalAccount_Handler,
		},
		{
			MethodName: "RegisterLDAPAccount",
			Handler:    _Account_RegisterLDAPAccount_Handler,
		},
		{
			MethodName: "UnRegisterAccount",
			Handler:    _Account_UnRegisterAccount_Handler,
		},
		{
			MethodName: "GetAccountInfo",
			Handler:    _Account_GetAccountInfo_Handler,
		},
		{
			MethodName: "GetAccountCount",
			Handler:    _Account_GetAccountCount_Handler,
		},
		{
			MethodName: "GetAccountList",
			Handler:    _Account_GetAccountList_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Account_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _Account_Logout_Handler,
		},
		{
			MethodName: "GetSessionInfo",
			Handler:    _Account_GetSessionInfo_Handler,
		},
		{
			MethodName: "SetSessionUserData",
			Handler:    _Account_SetSessionUserData_Handler,
		},
		{
			MethodName: "GetSessionUserData",
			Handler:    _Account_GetSessionUserData_Handler,
		},
		{
			MethodName: "RegisterApp",
			Handler:    _Account_RegisterApp_Handler,
		},
		{
			MethodName: "UnRegisterApp",
			Handler:    _Account_UnRegisterApp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

func init() { proto.RegisterFile("service.proto", fileDescriptor_service_b7e978bca760655e) }

var fileDescriptor_service_b7e978bca760655e = []byte{
	// 321 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x93, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0x45, 0xb0, 0xe2, 0x68, 0x15, 0xc7, 0x2a, 0x5a, 0x6f, 0x82, 0xe0, 0x29, 0x07, 0x3d,
	0x78, 0x12, 0x0c, 0x29, 0x04, 0x21, 0xa0, 0xa4, 0xf4, 0x01, 0x92, 0xb0, 0x86, 0x80, 0x66, 0xd7,
	0xec, 0xc6, 0x57, 0xf6, 0x35, 0x64, 0xa6, 0xdd, 0x74, 0xd3, 0x64, 0x6f, 0xdd, 0xef, 0x9f, 0xf9,
	0xf8, 0x29, 0x13, 0x98, 0x6a, 0xd1, 0xfc, 0x56, 0x85, 0x08, 0x54, 0x23, 0x8d, 0xc4, 0x7d, 0x95,
	0xcf, 0x8f, 0xbe, 0x75, 0xb9, 0x7e, 0x3e, 0xfe, 0x4d, 0xe0, 0x30, 0x2c, 0x0a, 0xd9, 0xd6, 0x06,
	0x53, 0x98, 0xa5, 0xa2, 0xac, 0xb4, 0x11, 0x4d, 0x22, 0x8b, 0xec, 0xcb, 0xf2, 0xdb, 0x40, 0xe5,
	0xc1, 0x58, 0x92, 0x8a, 0x9f, 0xb9, 0x3f, 0xd4, 0xea, 0x6e, 0x0f, 0xdf, 0xe1, 0xa2, 0x0b, 0x17,
	0xe1, 0x87, 0x55, 0xce, 0x7b, 0x5b, 0xdb, 0x80, 0x8c, 0xde, 0x8c, 0x85, 0x31, 0x9c, 0xaf, 0x6a,
	0x9b, 0x5a, 0xdd, 0x35, 0xad, 0x0c, 0x30, 0xc9, 0x3c, 0x89, 0x56, 0xf8, 0x0a, 0xa7, 0xb1, 0x30,
	0x1b, 0xf0, 0x56, 0x7f, 0x4a, 0xbc, 0xa4, 0xd9, 0x3e, 0x23, 0xc5, 0x18, 0xe6, 0x2a, 0x11, 0x9c,
	0x6d, 0x71, 0xc4, 0x45, 0xae, 0xfa, 0xb3, 0x91, 0xad, 0x31, 0xca, 0x59, 0xd2, 0xab, 0x91, 0x54,
	0xda, 0xec, 0xd6, 0x20, 0x36, 0x52, 0x83, 0x31, 0x1b, 0xee, 0xe1, 0x20, 0x91, 0x65, 0x55, 0xe3,
	0x09, 0x4d, 0xf0, 0x4f, 0x9a, 0x77, 0x5e, 0x3c, 0xf6, 0x00, 0x93, 0x44, 0x96, 0xb2, 0x35, 0x38,
	0xdd, 0x24, 0xb2, 0x65, 0xb1, 0xfb, 0x74, 0x2a, 0x2d, 0x85, 0xd6, 0x95, 0xac, 0x7b, 0xff, 0x8c,
	0xc3, 0xdc, 0x4a, 0x2e, 0x66, 0x43, 0x02, 0xb8, 0xec, 0xf0, 0x4a, 0x8b, 0x66, 0x91, 0x99, 0x0c,
	0x6f, 0x68, 0x7c, 0xc8, 0xc9, 0xe4, 0x8b, 0xac, 0x2d, 0xf6, 0xd8, 0x62, 0xbf, 0x2d, 0xf6, 0xd8,
	0x9e, 0xe1, 0xb8, 0xbb, 0x06, 0xa5, 0x10, 0xdd, 0x6b, 0x0b, 0x95, 0xa2, 0xfd, 0x01, 0xe3, 0xc5,
	0x17, 0x98, 0x3a, 0x87, 0xa4, 0x14, 0xce, 0x76, 0x6e, 0x6b, 0xbd, 0x3c, 0x42, 0x69, 0x3d, 0x9f,
	0xf0, 0x07, 0xf7, 0xf4, 0x1f, 0x00, 0x00, 0xff, 0xff, 0x38, 0x38, 0xeb, 0x83, 0x90, 0x03, 0x00,
	0x00,
}
