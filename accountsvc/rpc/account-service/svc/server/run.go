// Code generated by truss. DO NOT EDIT.
// Rerunning truss will overwrite this file.
// Version: 7dc4d5d85c
// Version Date: Mon May 28 22:12:59 UTC 2018

package server

import (
	"log"
	"net"
	"net/http"
	"net/http/pprof"

	// 3d Party
	"google.golang.org/grpc"

	// This Service
	"test/accountsvc/rpc/account-service/handlers"
	"test/accountsvc/rpc/account-service/svc"
	pb "test/accountsvc/rpc/pb"
)

// Config contains the required fields for running a server
type Config struct {
	HTTPAddr  string
	DebugAddr string
	GRPCAddr  string
}

func NewEndpoints() svc.Endpoints {
	// Business domain.
	var service pb.AccountServer
	{
		service = handlers.NewService()
		// Wrap Service with middlewares. See handlers/middlewares.go
		service = handlers.WrapService(service)
	}

	// Endpoint domain.
	var (
		registerlocalaccountEndpoint = svc.MakeRegisterLocalAccountEndpoint(service)
		registerldapaccountEndpoint  = svc.MakeRegisterLDAPAccountEndpoint(service)
		unregisteraccountEndpoint    = svc.MakeUnRegisterAccountEndpoint(service)
		getaccountinfoEndpoint       = svc.MakeGetAccountInfoEndpoint(service)
		getaccountcountEndpoint      = svc.MakeGetAccountCountEndpoint(service)
		getaccountlistEndpoint       = svc.MakeGetAccountListEndpoint(service)
		loginEndpoint                = svc.MakeLoginEndpoint(service)
		logoutEndpoint               = svc.MakeLogoutEndpoint(service)
		getsessioninfoEndpoint       = svc.MakeGetSessionInfoEndpoint(service)
		setsessionuserdataEndpoint   = svc.MakeSetSessionUserDataEndpoint(service)
		getsessionuserdataEndpoint   = svc.MakeGetSessionUserDataEndpoint(service)
		registerappEndpoint          = svc.MakeRegisterAppEndpoint(service)
		unregisterappEndpoint        = svc.MakeUnRegisterAppEndpoint(service)
	)

	endpoints := svc.Endpoints{
		RegisterLocalAccountEndpoint: registerlocalaccountEndpoint,
		RegisterLDAPAccountEndpoint:  registerldapaccountEndpoint,
		UnRegisterAccountEndpoint:    unregisteraccountEndpoint,
		GetAccountInfoEndpoint:       getaccountinfoEndpoint,
		GetAccountCountEndpoint:      getaccountcountEndpoint,
		GetAccountListEndpoint:       getaccountlistEndpoint,
		LoginEndpoint:                loginEndpoint,
		LogoutEndpoint:               logoutEndpoint,
		GetSessionInfoEndpoint:       getsessioninfoEndpoint,
		SetSessionUserDataEndpoint:   setsessionuserdataEndpoint,
		GetSessionUserDataEndpoint:   getsessionuserdataEndpoint,
		RegisterAppEndpoint:          registerappEndpoint,
		UnRegisterAppEndpoint:        unregisterappEndpoint,
	}

	// Wrap selected Endpoints with middlewares. See handlers/middlewares.go
	endpoints = handlers.WrapEndpoints(endpoints)

	return endpoints
}

// Run starts a new http server, gRPC server, and a debug server with the
// passed config and logger
func Run(cfg Config) {
	endpoints := NewEndpoints()

	// Mechanical domain.
	errc := make(chan error)

	// Interrupt handler.
	go handlers.InterruptHandler(errc)

	// Debug listener.
	go func() {
		log.Println("transport", "debug", "addr", cfg.DebugAddr)

		m := http.NewServeMux()
		m.Handle("/debug/pprof/", http.HandlerFunc(pprof.Index))
		m.Handle("/debug/pprof/cmdline", http.HandlerFunc(pprof.Cmdline))
		m.Handle("/debug/pprof/profile", http.HandlerFunc(pprof.Profile))
		m.Handle("/debug/pprof/symbol", http.HandlerFunc(pprof.Symbol))
		m.Handle("/debug/pprof/trace", http.HandlerFunc(pprof.Trace))

		errc <- http.ListenAndServe(cfg.DebugAddr, m)
	}()

	// HTTP transport.
	go func() {
		log.Println("transport", "HTTP", "addr", cfg.HTTPAddr)
		h := svc.MakeHTTPHandler(endpoints)
		errc <- http.ListenAndServe(cfg.HTTPAddr, h)
	}()

	// gRPC transport.
	go func() {
		log.Println("transport", "gRPC", "addr", cfg.GRPCAddr)
		ln, err := net.Listen("tcp", cfg.GRPCAddr)
		if err != nil {
			errc <- err
			return
		}

		srv := svc.MakeGRPCServer(endpoints)
		s := grpc.NewServer()
		pb.RegisterAccountServer(s, srv)

		errc <- s.Serve(ln)
	}()

	// Run!
	log.Println("exit", <-errc)
}
